version: '3'
services:
  postgres:
    container_name: postgresserver
    image: postgres:latest
    ports:
      - '5432:5432'
    networks:
      - fp_pinjaman_online
    environment:
      - POSTGRES_USER: ${DB_USER}
      - POSTGRES_PASSWORD: ${DB_PASS}
      - POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5

  fp_pinjaman_online:
    depends_on:
      postgres:
        condition: service_healthy
    container_name: fp_pinjaman_online
    image: fp_pinjaman_online
    ports:
      - '8080:8080'
    networks:
      - fp_pinjaman_online
    environment:
      - DB_HOST: ${DB_HOST}
      - DB_USER: ${DB_USER}
      - DB_PASS: ${DB_PASS}
      - POST_EMAIL: ${POST_EMAIL}
      - POST_PASS: ${POST_PASS}
      - CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      - APP_NAME: ${APP_NAME}
      - JWT_SIGNATURE_KEY: ${JWT_SIGNATURE_KEY}
      - DB_PORT: ${DB_PORT}
      - DB_NAME: ${DB_NAME}
      - MAX_IDLE: ${MAX_IDLE}
      - MAX_CONN: ${MAX_CONN}
      - MAX_LIFE_TIME: ${MAX_LIFE_TIME}
      - PORT: ${PORT}
      - LOG_MODE: ${LOG_MODE}
      - MIDTRANS_SERVER_KEY: ${MIDTRANS_SERVER_KEY}

  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./db/migrations:/migrations
  environment:
    DB_USER: ${DB_USER}
    DB_PASSWORD: ${DB_PASS}
    DB_NAME: ${DB_NAME}
    DB_HOST: ${DB_HOST}
    DB_PORT: ${DB_PORT}
    DB_SSLMODE: disable
  entrypoint:
    [
      'sh',
      '-c',
      'migrate -path /migrations -database postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable up',
    ]
  networks: -fp_pinjaman_online

networks:
  fp_pinjaman_online:
    name: fp_pinjaman_online
