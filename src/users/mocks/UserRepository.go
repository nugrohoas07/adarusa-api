// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	dcFormDto "fp_pinjaman_online/model/dcFormDto"
	debiturFormDto "fp_pinjaman_online/model/debiturFormDto"

	mock "github.com/stretchr/testify/mock"

	userDto "fp_pinjaman_online/model/userDto"

	usersEntity "fp_pinjaman_online/model/entity/usersEntity"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateDetailDc provides a mock function with given fields: req
func (_m *UserRepository) CreateDetailDc(req dcFormDto.DetailDC) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateDetailDc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dcFormDto.DetailDC) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDetailDebitur provides a mock function with given fields: req
func (_m *UserRepository) CreateDetailDebitur(req debiturFormDto.Debitur) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateDetailDebitur")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(debiturFormDto.Debitur) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: req, roleId
func (_m *UserRepository) CreateUser(req userDto.CreateRequest, roleId int) error {
	ret := _m.Called(req, roleId)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(userDto.CreateRequest, int) error); ok {
		r0 = rf(req, roleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDataByRole provides a mock function with given fields: role, status, limit, offset
func (_m *UserRepository) GetDataByRole(role string, status string, limit int, offset int) ([]debiturFormDto.DetailDebitur, int, error) {
	ret := _m.Called(role, status, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetDataByRole")
	}

	var r0 []debiturFormDto.DetailDebitur
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]debiturFormDto.DetailDebitur, int, error)); ok {
		return rf(role, status, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []debiturFormDto.DetailDebitur); ok {
		r0 = rf(role, status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]debiturFormDto.DetailDebitur)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int); ok {
		r1 = rf(role, status, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(role, status, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEmergencyContactByUserId provides a mock function with given fields: userId
func (_m *UserRepository) GetEmergencyContactByUserId(userId string) (usersEntity.EmergencyContact, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetEmergencyContactByUserId")
	}

	var r0 usersEntity.EmergencyContact
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (usersEntity.EmergencyContact, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) usersEntity.EmergencyContact); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(usersEntity.EmergencyContact)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFullname provides a mock function with given fields: userId
func (_m *UserRepository) GetFullname(userId int) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetFullname")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRolesById provides a mock function with given fields: userId
func (_m *UserRepository) GetRolesById(userId string) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetRolesById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetUserByEmail(email string) (userDto.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 userDto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (userDto.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) userDto.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(userDto.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetailByUserId provides a mock function with given fields: userId
func (_m *UserRepository) GetUserDetailByUserId(userId string) (usersEntity.DetailUser, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDetailByUserId")
	}

	var r0 usersEntity.DetailUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (usersEntity.DetailUser, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) usersEntity.DetailUser); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(usersEntity.DetailUser)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserJobDetailByUserId provides a mock function with given fields: userId
func (_m *UserRepository) GetUserJobDetailByUserId(userId string) (usersEntity.UserJobDetail, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserJobDetailByUserId")
	}

	var r0 usersEntity.UserJobDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (usersEntity.UserJobDetail, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) usersEntity.UserJobDetail); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(usersEntity.UserJobDetail)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsBankAccExist provides a mock function with given fields: userId, accountNumber
func (_m *UserRepository) IsBankAccExist(userId int, accountNumber string) (bool, error) {
	ret := _m.Called(userId, accountNumber)

	if len(ret) == 0 {
		panic("no return value specified for IsBankAccExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (bool, error)); ok {
		return rf(userId, accountNumber)
	}
	if rf, ok := ret.Get(0).(func(int, string) bool); ok {
		r0 = rf(userId, accountNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userId, accountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: req
func (_m *UserRepository) Login(req userDto.LoginRequest) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(userDto.LoginRequest) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(userDto.LoginRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(userDto.LoginRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBankAccount provides a mock function with given fields: userId, accountNumber, bankName
func (_m *UserRepository) UpdateBankAccount(userId int, accountNumber string, bankName string) error {
	ret := _m.Called(userId, accountNumber, bankName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBankAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(userId, accountNumber, bankName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePhotoPaths provides a mock function with given fields: userId, fotoKTP, fotoSelfie
func (_m *UserRepository) UpdatePhotoPaths(userId int, fotoKTP string, fotoSelfie string) error {
	ret := _m.Called(userId, fotoKTP, fotoSelfie)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhotoPaths")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(userId, fotoKTP, fotoSelfie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserExists provides a mock function with given fields: email
func (_m *UserRepository) UserExists(email string) (bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
